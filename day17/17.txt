前情回顾
1. 数据库权限配置
2. pymysql

   db = pymysql.connect()
   cur = db.cursor()

   读: cur.execute()   cur.fetchone()  cur.fetchmany()  cur.fetchall()
   写: cur.execute()      db.commit()  db.rollback()
       cur.executemany()

   cur.close()
   db.close()

3. 向数据库存储文件  blob

4. 数据库总结

5. 软件项目开发流程

6. GIT
   git 特点
   git 配置
   工作 --> 仓库 :  git add      git commit


git 基础操作

git init
git status
git add
git rm
git mv
git commit  -m
git log
git checkout --


git 版本管理

git log
git reflog

git reset --hard   HEAD^/commit_id/tag
git tag


git 分支

git branch
git checkout
git merge  --> 冲突问题
git branch -d

远程仓库交互

克隆项目   git clone [项目地址]
拉取最新代码  git pull

在gitee创建仓库
git clone  [自己的项目ssh地址]
在本地克隆仓库中写项目
推送远程 : git push     (先 add commit 到本地仓库)

创建空仓库 (不自动添加任何文件)
进入自己项目的跟目录
链接远程 : git remote add origin git@gitee.com:levi0321/aid_2202.git
上传分支 : git push -u origin master

===========================================================
在线词典

需求分析  C/S
   客户端使用流程 见详细设计文档

功能结构划分 代码整体结构设计   (类)
   注册  登录
   查单词  历史记录

   模块和类的划分 见详细设计文档

技术点分析
   网络 : tcp网络
   并发模型 : 多进程并发
   数据库 : MySQL 数据库
   客户端两个界面如何跳转 : demo.py

数据库设计  dict 数据库  见详细设计文档
   words : id   word  mean

   user : id  name  password

   hist : id  user_id  words_id  time  降低冗余
   hist : id  name  word  time   冗余
   hist : id  word  time user_id


通信协议设计  见详细设计文档
   请求 : 请求类型    数据参数
   响应 : 每种请求的情况

网络框架搭建
   tcp 多进程网络并发   类
   服务端
        dict_server : 多进程tcp网络并发
        dict_db : 数据库处理类
   客户端
        dict_cilent : 仿照文件服务器客户端

分功能具体分析编写

优化完善



今日内容 : 1. git 使用
          2. git远程操作
          3. 在线词典

作业 : 1.在线词典处理
      2. 完成框架搭建





