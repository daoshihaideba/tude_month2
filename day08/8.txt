前情回顾

1. 多任务编程
   * 多个任务间的配合
   * 提高执行效率

   并发  并行

2. 进程
   定义   PID    状态   父子进程

3. 创建进程
   写函数  -》 实例化进程对象 -》 start启动进程
               Process()      start()

   os.getpid() os.getppid()  sys.exit()    p.join()

   自定义进程类
     继承Process
     重写 ： __init__   run

练习1： 求100000以内质数之和
质数 ： 只能被1和其本身整除的 > 1的整数
分别使用一个进程和4个进程完成这件事情，统计执行时间
* 一个进程做这件事用时
* 4个进程将100000分为4等份，每个进程分别求 其中一份的质数之和
  再将4个结果加在一起，4个进程同时进程 求最终总共时间
提示： import time    time.time()


cookie:

# 进程函数
def func(q):
    q.get()


if __name__ == "__main__":
    q = Queue() # 消息队列
    process = mp.Process(target=func,args=(q,))
    process.start()
    process.join()

聊天室
功能 ： 类似qq群功能
有人进入聊天室需要输入姓名，姓名不能重复
有人进入聊天室时，其他人会收到通知：Lucy 进入了聊天室
一个人发消息，其他人会收到：   Lucy ： 一起出去玩啊。
有人退出聊天室，则其他人也会收到通知 :  Lucy 退出了聊天室

需求分析 ： 在客户端的角度梳理出主体功能该如何使用
   见图

模块划分 ： 分成几个功能块 函数   （包 模块 类  函数）
   进入聊天室
   聊天
   退出

简单的技术点分析： 网络  模型
   网络模型 ： 循环网络模型   udp
   存储数据 : 姓名   地址    {name:address} [(name,addre)]
   消息数据怎么走 ： 转发
         两个进程分别：
         发送：  input() --> sendto()
         接受：  recvfrom()-->  print()

网络协议设计 : 功能丰富网络通信中必然存在某种协议商定

   格式： 空格分隔
               请求类型       数据参数
   进入聊天室     LOGIN         name
   聊天          CHAT        name  content
   退出          QUIT          name



搭建框架模型  （循环网路模型udp）
   服务端  客户端

实现具体每个功能

   进入聊天室
       客户端 ： 输入姓名
                发送请求
                等待结果  （进入  失败）

       服务端 ： 接收请求
                分析是否可以进入聊天室
                发送结果
                    可以 ： 告知其他人  数据存储
                    不可以

   聊天   客户端 ： 创建子进程
                  子进程负责不断的接收内容打印出来
                  父进程负责不断的输入内容发送出去（发送请求）

          服务端 ： 接收解析请求
                   明确 谁发来的消息 --》 组织数据
                   将聊天内容转发给所有其他客户端

   退出

优化完善





今日总结：
1. 进程间通信
2. 进程效率问题
3. 聊天室
    思考流程
    编程习惯 ： 写一个功能测一个功能
               先列逻辑再写代码

    多种请求 --》 总分
    通信协议

作业： 1. 进程函数总结
      2. 聊天室代码



