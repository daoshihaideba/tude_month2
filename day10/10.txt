前情回顾

1. 线程概念
   线程轻量级进程  ：  创建时资源消耗少
   多任务编程 ： 各自执行互不影响
   资源 ： 共享进程资源
   一个进程可以包含多个线程

   GIL问题 ： 线程执行无阻塞的任务的时候效率低

2. 创建线程
   写函数 -》 Thread() -》 t.start()
   自定义线程类

3. 同步互斥
   什么是同步互斥   死锁

   e = Event()  e.set()  e.clear()  e.wait()
   lock = Lock()  lock.acquire() lock.release()

4. 进程线程对比


完成一个多线程的网络并发模型，实现相同的功能
使用类完成 ，完成后使用 tcp_client测试


ftp 文件服务器
分为服务端和客户端，要求可以有多个客户端同时操作。
客户端可以查看服务器文件库中有什么文件。
客户端可以从文件库中下载文件到本地。
客户端可以上传一个本地文件到文件库。
使用print在客户端打印命令输入提示，引导操作

需求分析　：　C/S

结构设计　：　类
　 查看文件库　　下载　　　上传　

技术点分析：　　TCP网络
             多线程网络并发
             读取发送  --> 接收写入

设计网络协议
    请求
                请求类型        数据参数
       查看       LIST
       下载       GET           filename
       上传       PUT           filename
       退出       QUIT

    响应
              成功     失败
       查看    OK      EMPTY（访问不到文件库）
       下载    OK      FAIL(文件不存在)
       上传    OK      EXISTS（文件已存在）
       退出    无

搭建基础框架： 服务端 （多线程tcp网络并发）
             客户端 （参考学生管理系统）

具体功能实现
    查看文件库
    　　　　客户端　
               发送请求
               接收结果　
               根据结果处理　
               　　　ＯＫ　：　接收文件名打印
               　　　ｅｍｐｔｙ :
    　　　　
           服务端　
               接收请求解析　处理
               发送结果
               　　ＯＫ：　发送文件列表
               　ＥＭＰＴＹ　
    　
    下载　　　
         客户端：　　输入文件名
         　　　　　　发送请求
         　　　　　　接收结果
         　　　　　　　　ＯＫ　：　接收文件
         　　　　　　　　Ｆａｉｌ　：　　

    上传　


优化完善

系统编程　（核心编程）

文件读写（硬盘）
　　概念　：　什么是文件　　字节串
　　程序　：　open()  read()  write()  close()  　*　重点
　　细节　：　文件读写缓冲　　偏移量

网络通信（网卡）　
　　概念　：　OSI  TCP/IP  三次握手  四次回收  tcp与udp区别
            公网  内网   IP  端口号  域名  网络通信协议
    程序： 　ｕｄｐ套接字　socket()  bind()  recvfrom()  sendto() close()
    　　　　ｔｃｐ套接字编程　 listen() accept()  recv()  send()　* 重点
    细节: tcp　recv返回值　　粘包

    协议　：　ｈｔｔｐ协议　格式

进程线程（ｃｐｕ 内存）
    概念 ： 进程 PID  进程状态   线程  同步互斥  多任务编程 GIL
    编程 ： 进程  Process()  p.start()  p.join()  * 重点
           线程  Thread()  t.start()  t.join()
           自定义进程类和线程类
           进程间通信
           同步互斥方法
    难点 ： 进程线程执行现象理解

网络并发模型
    多进程多线程并发模型  * 重点

重点代码：
   day03 : exercise02.py
   day04 : 02_udp_server.py
   day05 : 01_tcp_server.py
   day05 : 03_tcp_short_server.py
   day06 : 03_http_server.py
   day07 : 03_process_3.py
   day08 : chat_server.py  chat_client.py
   day10 : 01_process_server.py
   day10 : 02_thread_server.py
   day10 : ftp_server.py  ftp_client.py



作业： 1. 重点代码 进程线程并发 自己写一遍
      2. 文件服务器梳理
      3. 系统编程梳理











